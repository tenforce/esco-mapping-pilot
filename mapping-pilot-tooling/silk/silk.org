#+TITLE: Initial results for VET

* Preparing Data for Silk
Silk can only use direct properties of a concept to do mappings, properties of linked items are therefore not taken in to account. This is not a problem. We simply create a separate graph that holds a transformed version of the occupations that we need to link, with temporary properties that hold direct values. 

The values currently used are:
- skosXl:prefLabel
- skosXl:altLabel
- skos:definition
- esco:memberOfISCOGroup

The member of ISCO group is not a very useful property for VET, because there are only 4 ISCO groups involved in the VET sector:
- ISCO-2131, Biologists, botanists, zoologists & related professionals
- ISCO-2250, Veterinarians
- ISCO-3240, Veterinary technicians and assistants
- ISCO-5164, Pet groomers and animal care workers
The occupations belonging to the groups above have been selected as a preparatory step out of the larger set of all ESCO v0 occupations. The alignment was only performed on the subset of occupations that belongs to this group.

ESCO v0 occupations do not have a definition, so the definition property will not influence the alignment as much as it potentially could

Currently skill names and definitions are not used for alignment, though it could possibly provide additional information.

** ESCO v0 vet construct

#+BEGIN_SRC sparql
  Construct {
    ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?prefL.
    ?s <http://www.w3.org/2004/02/skos/core#altLabel> ?altL. 
    ?s <http://www.w3.org/2004/02/skos/core#definition> ?def.
    ?s <http://ec.europa.eu/esco/model#memberOfISCOGroup> ?group .
  }where {
    graph <http://localhost/esco-v0> {
      # only select occupations
      ?s a <http://ec.europa.eu/esco/model#Occupation> .
      ?s a <http://ec.europa.eu/esco/model#MemberConcept> .
  
      # get preflabel
      ?s <http://www.w3.org/2008/05/skos-xl#prefLabel> ?pref .
      ?pref <http://www.w3.org/2008/05/skos-xl#literalForm> ?prefL . 
  
      OPTIONAL {
        # get altlabels if available
        ?s <http://www.w3.org/2008/05/skos-xl#altLabel> ?alt .
        ?alt <http://www.w3.org/2008/05/skos-xl#literalForm> ?altL .
      }
      OPTIONAL {
        # get definitino if available
        ?s <http://www.w3.org/2004/02/skos/core#definition> ?def . 
      }
      OPTIONAL {    
        # get group if available
        ?s <http://ec.europa.eu/esco/model#memberOfISCOGroup> ?group . 
      }
      FILTER (?group in (<http://ec.europa.eu/esco/isco2008/Concept/C2131>,
                         <http://ec.europa.eu/esco/isco2008/Concept/C2250>,
                         <http://ec.europa.eu/esco/isco2008/Concept/C3240>,
                         <http://ec.europa.eu/esco/isco2008/Concept/C5164>))
    }
  }
#+END_SRC

** ESCO v0 hospi construct
#+BEGIN_SRC sparql
  Construct {
    ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?prefL.
    ?s <http://www.w3.org/2004/02/skos/core#altLabel> ?altL. 
    ?s <http://www.w3.org/2004/02/skos/core#definition> ?def.
    ?s <http://ec.europa.eu/esco/model#memberOfISCOGroup> ?group .
  }where {
    graph <http://localhost/esco-v0> {
      # only select occupations
      ?s a <http://ec.europa.eu/esco/model#Occupation> .
      ?s a <http://ec.europa.eu/esco/model#MemberConcept> .
  
      # get preflabel
      ?s <http://www.w3.org/2008/05/skos-xl#prefLabel> ?pref .
      ?pref <http://www.w3.org/2008/05/skos-xl#literalForm> ?prefL . 
  
      OPTIONAL {
        # get altlabels if available
        ?s <http://www.w3.org/2008/05/skos-xl#altLabel> ?alt .
        ?alt <http://www.w3.org/2008/05/skos-xl#literalForm> ?altL .
      }
      OPTIONAL {
        # get definitino if available
        ?s <http://www.w3.org/2004/02/skos/core#definition> ?def . 
      }
      OPTIONAL {    
        # get group if available
        ?s <http://ec.europa.eu/esco/model#memberOfISCOGroup> ?group . 
      }
    }
    <http://localhost/hospi-isco-codes> <http://www.w3.org/2000/01/rdf-schema#member> ?group .
  }
#+END_SRC

** Hospi ISCO selection utility
#+BEGIN_SRC ttl :tangle hospi-helper.ttl
  <http://localhost/hospi-isco-codes> <http://www.w3.org/2000/01/rdf-schema#member> <http://ec.europa.eu/esco/isco2008/Concept/C1411> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C1412> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C1439> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C1439> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C3332> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C3434> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C4221> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C4222> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C4224> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C5111> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C5113> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C5120> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C5131> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C5132> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C5151> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C5152> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C5153> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C5162> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C5169> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C5211> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C5212> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C5230> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C5246> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C6113> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C9111> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C9112> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C9121> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C9129> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C9114> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C9411> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C9412> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C9613> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C9621> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C9622> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C9629> ,
  
  # to be safe
  <http://ec.europa.eu/esco/isco2008/Concept/C2164> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C2632> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C2633> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C2634> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C2636> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C2643> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C3334> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C3339> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C4226> ,
  <http://ec.europa.eu/esco/isco2008/Concept/C7541> .  
#+END_SRC

** ESCO v01 vet construct

#+BEGIN_SRC sparql
  Construct {
    ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?prefL.
    ?s <http://www.w3.org/2004/02/skos/core#altLabel> ?altL. 
    ?s <http://www.w3.org/2004/02/skos/core#definition> ?def.
    ?s <http://ec.europa.eu/esco/model#memberOfISCOGroup> ?group .
  }where {
    graph <http://localhost/vet-v01> {
      # only select occupations
      ?s a <http://ec.europa.eu/esco/model#Occupation> .
      ?s a <http://ec.europa.eu/esco/model#MemberConcept> .
  
      # get preflabel
      ?s <http://www.w3.org/2008/05/skos-xl#prefLabel> ?pref .
      ?pref <http://www.w3.org/2008/05/skos-xl#literalForm> ?prefL . 
  
      OPTIONAL {
        # get altlabels if available
        ?s <http://www.w3.org/2008/05/skos-xl#altLabel> ?alt .
        ?alt <http://www.w3.org/2008/05/skos-xl#literalForm> ?altL .
      }
      OPTIONAL {
        # get definitino if available
        ?s <http://www.w3.org/2004/02/skos/core#definition> ?def . 
      }
      OPTIONAL {    
        # get group if available
        ?s <http://ec.europa.eu/esco/model#memberOfISCOGroup> ?group . 
      }
     
    }
  }
  
#+END_SRC

** ESCO v01 hospi construct

#+BEGIN_SRC sparql
  Construct {
    ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?prefL.
    ?s <http://www.w3.org/2004/02/skos/core#altLabel> ?altL. 
    ?s <http://www.w3.org/2004/02/skos/core#definition> ?def.
    ?s <http://ec.europa.eu/esco/model#memberOfISCOGroup> ?group .
  }where {
    graph <http://localhost/hospi-v01> {
      # only select occupations
      ?s a <http://ec.europa.eu/esco/model#Occupation> .
      ?s a <http://ec.europa.eu/esco/model#MemberConcept> .
  
      # get preflabel
      ?s <http://www.w3.org/2008/05/skos-xl#prefLabel> ?pref .
      ?pref <http://www.w3.org/2008/05/skos-xl#literalForm> ?prefL . 
  
      OPTIONAL {
        # get altlabels if available
        ?s <http://www.w3.org/2008/05/skos-xl#altLabel> ?alt .
        ?alt <http://www.w3.org/2008/05/skos-xl#literalForm> ?altL .
      }
      OPTIONAL {
        # get definitino if available
        ?s <http://www.w3.org/2004/02/skos/core#definition> ?def . 
      }
      OPTIONAL {    
        # get group if available
        ?s <http://ec.europa.eu/esco/model#memberOfISCOGroup> ?group . 
      }
     
    }
  }
  
#+END_SRC

* Lists of data
Getting lists of the available data is useful for making a manual comparison between the two sets.
** hospi-v01
#+BEGIN_SRC sparql
  select ?s ?prefL (GROUP_CONCAT(?altL) as ?alts) ?group where {
    graph <http://localhost/hospi-silk-v01> {
      ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?prefL.
      OPTIONAL {
        ?s <http://www.w3.org/2004/02/skos/core#altLabel> ?altL. 
        FILTER (lang(?altL) = "en").
      }
      ?s <http://ec.europa.eu/esco/model#memberOfISCOGroup> ?group .
  
      FILTER (lang(?prefL) = "en").
    }
  } GROUP BY ?s ?prefL ?group order by ?prefL
#+END_SRC
** hospi-v0
#+BEGIN_SRC sparql
  select ?s ?prefL (GROUP_CONCAT(?altL) as ?alts) ?group where {
      graph <http://localhost/hospi-silk-v0> {
        ?s <http://www.w3.org/2004/02/skos/core#prefLabel> ?prefL.
        OPTIONAL {
          ?s <http://www.w3.org/2004/02/skos/core#altLabel> ?altL. 
          FILTER (lang(?altL) = "en").
        }
        ?s <http://ec.europa.eu/esco/model#memberOfISCOGroup> ?group .
    
        FILTER (lang(?prefL) = "en").
      }
    } GROUP BY ?s ?prefL ?group order by ?prefL
#+END_SRC

* Observations regarding the tool
- silk runs using the play framework (http://playframework.com) and is written in Scala, which means it runs on the Java VM
- it does not run as a war file by default, but there are third party libraries that allow the creation of a war file from a play project (https://github.com/play2war/play2-war-plugin). I did not yet verify whether this works
- silk allows you to build a linkage rule (alignment rule), learn a linkage rule (first results on vet are /bad/) and manually adjust linkage rule results.
- silk does not make a distinction on language in the default implementation, but based on first glimpses of the code, it would not be hard to create such a comparator. Matching all languages may not be a big drawback either.
- silk allows comparing any property at all (string, numeric, uri) and allows to match any two properties.
- it seems silk requires all properties that a linkage rule speaks of to be available on all elements to be linked. This means that if e.g. skos:altLabel is used in the linkage rule, then only concepts are examined for linking that actually have a skos:altLabel. This can be worked around (by adding the uri as an altlabel) or fixed in the code (which would take more time)
* Observations regarding the data
** Low amount of information
The data misses a lot of the useful information that we could use for mapping: v0 does not have definitions, v01 does not have translations or (many) non-preferred terms (yet).
** Low diversity
The veterinary sector has low diversity. Many occupations are very much related to each other, also in terminology used. It is therefore hard to distinguish occupations
** Possibly incorrect information in v0
The v0 data has translations that seem to be invalid. 'Veterinary surgeon' is translated as 'Dierenarts' in Dutch. This is indeed the same as 'Veterinarian' (which is the npt of this concept), but which is actually more general and should be more like a 'Veterinary generalist'.
** TODO Conflicting information in v0
In the v0 dataset, the border between two occupations is very unclear. Sometimes there are two occupations, where the preferred term of the first is the non-preferred term of the second and vice versa, or that have very similar preferred terms and the same non preferred terms. An example in Hospi is: http://ec.europa.eu/esco/occupation/16601 (hotel concierge) and http://ec.europa.eu/esco/occupation/20888 (hotel porter)
** Duplicate information in v0
Cloakroom assistant
Cloakroom attendant
Cloakroom caretaker
Cloakroom keeper

are all different occupations... There are many examples of this
** Chain of command-Hierarchy in ESCO v0
There is chain of command hierarchy in ESCO v0, something that is not allowed in ESCO v1: there is something as a 'Head Receptionist', 'steward's assistent', 'head cleaner'
** Things to look for in v1
- is barista /really/ different from barkeeper guys?
- is linen attendant really needed?
- restaurant manager was deprecated, which is good, but maybe it can be npt for food/beverage manager?
- is cleaning part of hospitality? I guess not, but need to validate.
* Current results
The current results are not very good. There were 6 correct matches and (4 incorrect ones), though because of the manual correction, recall is probably more important than precision. Two v0 concept were already matched to 1 v01 concept. 

It seems recall is very low, even though I did not yet create a fully manual mapping to validate that.
* Next steps
** Manual comparison
I will look at the content of v0 (as filtered for vet) and v01 (for vet) and compare them manually, to list how many concepts could in fact really be matched.
** Hospitality
I am hoping that the hospitality data set is more diverse than the vet data set, making it better suited for alignment. I will therefore try aligning hospi v0 and v01
** war file building?
I can try to create a war file from the play project. I don't know whether it is necessary that the alignment tools run on the standard EC infrastructure yet, though...
** Amalgame?
I can have a more in depth look at Amalgame, which I only installed at the moment. Amalgame uses its own, internal, triple store only and is written in swi-prolog, making it incompatible with the standard EC infrastructure.
* problematic cases
- chef: head vs normal chef distinction not always clear
- porter vs night porter, same thing?
